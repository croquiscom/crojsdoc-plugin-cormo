// Generated by CoffeeScript 1.9.3
(function() {
  var onCommentCoffeeScript, onCommentJavaScript;

  exports.externalTypes = {
    Model: 'http://croquiscom.github.io/cormo/classes/Model.html',
    RecordID: 'http://croquiscom.github.io/cormo/classes/ptypes.RecordID.html',
    Integer: 'http://croquiscom.github.io/cormo/classes/ptypes.Integer.html',
    GeoPoint: 'http://croquiscom.github.io/cormo/classes/ptypes.GeoPoint.html',
    'cormo.Model': 'http://croquiscom.github.io/cormo/classes/Model.html',
    'cormo.types.RecordID': 'http://croquiscom.github.io/cormo/classes/ptypes.RecordID.html',
    'cormo.types.Integer': 'http://croquiscom.github.io/cormo/classes/ptypes.Integer.html',
    'cormo.types.GeoPoint': 'http://croquiscom.github.io/cormo/classes/ptypes.GeoPoint.html'
  };

  onCommentCoffeeScript = function(comment) {
    var path, property, type;
    if (/^@column\s+['"]([^'"]+)['"]\s*,\s+(.*)/.test(comment.code)) {
      path = RegExp.$1;
      property = RegExp.$2.trim();
      comment.tags.push({
        type: 'property',
        name: path
      });
      if (/^([A-Za-z.]+)$/.test(property) || /type\s*:\s*([A-Za-z.]+)/.test(property)) {
        type = RegExp.$1.replace(/cormo\.types\./, '');
        return comment.tags.push({
          type: 'type',
          typeString: type
        });
      }
    }
  };

  onCommentJavaScript = function(comment) {
    var model, path, property, type;
    if (/\bconnection.model\s*\(\s*['"]([^'"]+)['"],/.test(comment.code)) {
      return comment.tags.push({
        type: 'class',
        string: RegExp.$1
      });
    } else if (/([A-Za-z0-9_]+)\.column\s*\(\s*['"]([^'"]+)['"]\s*,\s*(.*)/.test(comment.code)) {
      model = RegExp.$1;
      path = RegExp.$2;
      property = RegExp.$3;
      comment.tags.push({
        type: 'memberof',
        parent: model + '::'
      });
      comment.tags.push({
        type: 'property',
        name: path
      });
      if (/^([A-Za-z.]+)/.test(property) || /type:\s*([A-Za-z.]+)/.test(property)) {
        type = RegExp.$1.replace(/cormo\.types\./, '');
        return comment.tags.push({
          type: 'type',
          typeString: type
        });
      }
    }
  };

  exports.onComment = function(comment) {
    if (comment.language === 'coffeescript') {
      return onCommentCoffeeScript(comment);
    } else if (comment.language === 'javascript') {
      return onCommentJavaScript(comment);
    }
  };

}).call(this);
